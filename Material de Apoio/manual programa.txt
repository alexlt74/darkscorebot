Para ativar o venv 
.Scripts\venv\activate

>Para ativar o serve entrar no programa server.py e digitar: python server.py

>Passos para Instalar o Git:
 1-Instalar o Git:

Acesse o site oficial do Git: Git Downloads

Baixe o instalador apropriado para o seu sistema operacional (Windows, macOS ou Linux).

Siga as instruções de instalação.

Verificar a Instalação:

Após a instalação, abra o terminal (Prompt de Comando ou PowerShell no Windows).

2-Execute o comando: git --version

Você deve ver a versão do Git instalada, confirmando que a instalação foi bem-sucedida.

Configurar o Git:

Configure seu nome de usuário e e-mail: git config --global user.name "alexlt74"
                                        git config --global user.email "alexlt@hotmail.com"

3- Envie as alterações para o GitHub:

Execute o seguinte comando para enviar as alterações para o repositório no GitHub:
git push origin main




tutorial flash score
por Francisco Vito Junior
No arquivo "get_odds.py", que está dentro da pasta "modules", contém os métodos para a raspagem.
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import  NoSuchElementException
import re
from time import sleep
class GetOdds:
    def __init__(self, driver):
        self.driver = driver

    def get_match_details(self, id_jogo, jogo, season):
        """Método para obter detalhes gerais do jogo."""
        jogo['Season'] = season
        self.driver.get(f'https://www.flashscore.com.br/jogo/{id_jogo}/#/resumo-de-jogo/resumo-de-jogo')
        jogo['Id'] = id_jogo

        # País
        country = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country').text.split(':')[0]

        # Data e Hora
        date = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__startTime').text.split(' ')[0]
        jogo['Date'] = date.replace('.', '/')
        time = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__startTime').text.split(' ')[1]
        jogo['Time'] = time

        # Liga
        league = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country > a').text.split(' -')[0]
        jogo['League'] = f'{country} - {league}'

        # Home e Away
        home = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__home').find_element(By.CSS_SELECTOR, 'div.participant__participantName').text
        jogo['Home'] = home
        away = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__away').find_element(By.CSS_SELECTOR, 'div.participant__participantName').text
        jogo['Away'] = away

        # Rodada
        try:
            rodada = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country > a').text.split('- ')[1]
            jogo['Round_number'] = rodada
        except IndexError:
            jogo['Round_number'] = '-'
        except NoSuchElementException:
            jogo['Round_number'] = '-'
            
    def get_match_details_historic(self, id_jogo, jogo, season):
        """Método para obter detalhes historicos gerais do jogo."""
        jogo['Season'] = season
        self.driver.get(f'https://www.flashscore.com.br/jogo/{id_jogo}/#/resumo-de-jogo/resumo-de-jogo')
        jogo['Id'] = id_jogo

        # País
        country = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country').text.split(':')[0]

        # Data e Hora
        date = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__startTime').text.split(' ')[0]
        jogo['Date'] = date.replace('.', '/')
        time = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__startTime').text.split(' ')[1]
        jogo['Time'] = time

        # Liga
        league = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country > a').text.split(' -')[0]
        jogo['League'] = f'{country} - {league}'

        # Home e Away
        home = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__home').find_element(By.CSS_SELECTOR, 'div.participant__participantName').text
        jogo['Home'] = home
        away = self.driver.find_element(By.CSS_SELECTOR, 'div.duelParticipant__away').find_element(By.CSS_SELECTOR, 'div.participant__participantName').text
        jogo['Away'] = away

        # Rodada
        try:
            rodada = self.driver.find_element(By.CSS_SELECTOR, 'span.tournamentHeader__country > a').text.split('- ')[1]
            jogo['Round_number'] = rodada
        except IndexError:
            jogo['Round_number'] = '-'
        except NoSuchElementException:
            jogo['Round_number'] = '-'

        # Placar e Gols FT
        placar = self.driver.find_elements(By.CSS_SELECTOR, 'div.duelParticipant__score')[0].text
        jogo['placar'] = placar
        numeros = re.findall(r'\d+', placar)
        placar_1 = numeros[0]
        placar_2 = numeros[1]
        jogo['FT_Goals_H'] = placar_1
        jogo['FT_Goals_A'] = placar_2

        del jogo['placar']
                                   
            
    def get_odds_1x2(self, id_jogo, jogo):
        """Método para obter odds de 1x2 do jogo no Tempo Regulamentar."""
        url_ml_full_time = f'https://www.flashscore.com.br/jogo/{id_jogo}/#/comparacao-de-odds/1x2-odds/tempo-regulamentar'
        self.driver.get(url_ml_full_time)
        WebDriverWait(self.driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.ui-table')))
        table_odds = self.driver.find_element(By.CSS_SELECTOR, 'div.ui-table')
        linha_ml_ft = table_odds.find_element(By.CSS_SELECTOR, 'div.ui-table__row')
        jogo['FT_Odd_ML_Bookie'] = linha_ml_ft.find_element(By.CSS_SELECTOR, 'img.prematchLogo').get_attribute('title')
        jogo['FT_Odd_ML_H'] = float(linha_ml_ft.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[0].text)
        jogo['FT_Odd_ML_D'] = float(linha_ml_ft.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[1].text)
        jogo['FT_Odd_ML_A'] = float(linha_ml_ft.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[2].text)  
        
        
    def get_ou_first_half(self, id_jogo, jogo):
        """Obtém odds de Acima/Abaixo do 1º Tempo."""
        url_ou_first_half = f'https://www.flashscore.com.br/jogo/{id_jogo}/#/comparacao-de-odds/acima-abaixo/1-tempo'
        self.driver.get(url_ou_first_half)
        sleep(1)
        
        if self.driver.current_url == url_ou_first_half:
            WebDriverWait(self.driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.ui-table')))
            linhas = self.driver.find_elements(By.CSS_SELECTOR, 'div.ui-table__body')

            for linha in linhas:
                if len(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')) > 1:
                    bookie = linha.find_element(By.CSS_SELECTOR, 'img.prematchLogo').get_attribute('title')
                    total_gols = linha.find_element(By.CSS_SELECTOR, 'span.oddsCell__noOddsCell').text.replace('.', '')

                    if total_gols == '05':
                        over = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[0].text)
                        under = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[1].text)
                        jogo[f'HT_Odd_OU_{total_gols}_Bookie'] = bookie
                        jogo[f'HT_Odd_Over{total_gols}'] = over
                        jogo[f'HT_Odd_Under{total_gols}'] = under
                        

    def get_ou_full_time(self, id_jogo, jogo):
        """Obtém odds de Acima/Abaixo do Tempo Regulamentar."""
        url_ou_full_time = f'https://www.flashscore.com.br/jogo/{id_jogo}/#/comparacao-de-odds/acima-abaixo/tempo-regulamentar'
        self.driver.get(url_ou_full_time)
        sleep(1)
        
        if self.driver.current_url == url_ou_full_time:
            WebDriverWait(self.driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.ui-table')))
            linhas = self.driver.find_elements(By.CSS_SELECTOR, 'div.ui-table__body')

            for linha in linhas:
                if len(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')) > 1:
                    bookie = linha.find_element(By.CSS_SELECTOR, 'img.prematchLogo').get_attribute('title')
                    total_gols = linha.find_element(By.CSS_SELECTOR, 'span.oddsCell__noOddsCell').text.replace('.', '')

                    if total_gols in ['05', '15', '25', '35', '45']:
                        over = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[0].text)
                        under = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[1].text)
                        jogo[f'FT_Odd_OU_{total_gols}_Bookie'] = bookie
                        jogo[f'FT_Odd_Over{total_gols}'] = over
                        jogo[f'FT_Odd_Under{total_gols}'] = under

    def get_btts_full_time(self, id_jogo, jogo):
        """Obtém odds de Ambos Marcam (BTTS) no Tempo Regulamentar."""
        url_btts_full_time = f'https://www.flashscore.com.br/jogo/{id_jogo}/#/comparacao-de-odds/ambos-marcam/tempo-regulamentar'
        self.driver.get(url_btts_full_time)
        sleep(1)

        if self.driver.current_url == url_btts_full_time:
            WebDriverWait(self.driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'div.ui-table')))
            linha = self.driver.find_element(By.CSS_SELECTOR, 'div.ui-table__row')

            bookie_btts = linha.find_element(By.CSS_SELECTOR, 'img.prematchLogo').get_attribute('title')
            jogo['FT_Odd_BTTS_Bookie'] = bookie_btts
            jogo['FT_Odd_BTTS_Yes'] = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[0].text)
            jogo['FT_Odd_BTTS_No'] = float(linha.find_elements(By.CSS_SELECTOR, 'a.oddsCell__odd')[1].text)        


​
No arquivo "Ligas.py”, que está dentro da pasta "modules", contém a lista com as ligas para a raspagem.
         
ligas = [
         'brasil/brasileirao-betano',

]  
​
requirements.txt
attrs==24.2.0
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.3.2
colorama==0.4.6
et-xmlfile==1.1.0
h11==0.14.0
idna==3.10
numpy==2.1.2
openpyxl==3.1.5
outcome==1.3.0.post0
packaging==24.1
pandas==2.2.3
pycparser==2.22
PySocks==1.7.1
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
pytz==2024.2
requests==2.32.3
selenium==4.25.0
six==1.16.0
sniffio==1.3.1
sortedcontainers==2.4.0
tinydb==4.8.2
tqdm==4.66.5
trio==0.26.2
trio-websocket==0.11.1
typing_extensions==4.12.2
tzdata==2024.2
urllib3==2.2.3
webdriver-manager==4.0.2
websocket-client==1.8.0
wsproto==1.2.0

​
A raspagem dos jogos históricos fica no arquivo run_jh.py
from tinydb import TinyDB, Query
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from tqdm.auto import tqdm
import warnings
from modules.Ligas import ligas
from modules.get_odds import GetOdds

warnings.filterwarnings("ignore")

# Configurações do Firefox
firefox_options = Options()
#firefox_options.add_argument("--headless")  # Executa em modo headless

# Inicia o serviço do GeckoDriver
service = Service('geckodriver.exe')  

# Cria uma instância do Firefox
driver = webdriver.Firefox(service=service, options=firefox_options)

data = GetOdds(driver)
driver.maximize_window()



for liga in tqdm(ligas):
    colecao_partidas = TinyDB('db/base_flashscore_temp_atual.json')
    url = f'https://www.flashscore.com.br/futebol/{liga}/resultados/'
    driver.get(url)

    try:
        # Tenta fechar o banner de cookies
        WebDriverWait(driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR, 'button#onetrust-accept-btn-handler')))
        button_cookies = driver.find_element(By.CSS_SELECTOR, 'button#onetrust-accept-btn-handler')
        button_cookies.click()
    except:
        print("Cookies banner already closed or not found.")
        

    sleep(3)
    while True:
        botoes_proxima_pagina = driver.find_elements(By.CSS_SELECTOR, 'a.event__more--static')
        if not botoes_proxima_pagina:
            break
        botoes_proxima_pagina[0].click()
        sleep(3) 
        

    jogos = driver.find_elements(By.CSS_SELECTOR,'div.event__match')

    sleep(3)

    id_jogos =[]

    for i in jogos:
        id_jogos.append(i.get_attribute("id")[4:])  
        #id_jogos = id_jogos[:10] 
        
    season = driver.find_element(By.CSS_SELECTOR,'div.heading__info').text 
    print(driver.title)

    for id_jogo in tqdm(id_jogos):
        procura_duplicado = Query()
        if colecao_partidas.search(procura_duplicado.Id == id_jogo) == []:
            try:
                jogo = {}
                # Obter detalhes gerais do jogo
                data.get_match_details_historic(id_jogo=id_jogo , jogo=jogo, season=season)

                # Obter odds de 1x2 do jogo no Tempo Regulamentar
                data.get_odds_1x2(id_jogo=id_jogo , jogo=jogo)
                            
                # Obter odds de Acima/Abaixo do 1º Tempo
                data.get_ou_first_half(id_jogo=id_jogo , jogo=jogo)

                # Obter odds de Acima/Abaixo do Tempo Regulamentar
                data.get_ou_full_time(id_jogo=id_jogo , jogo=jogo)

                # Obter odds de Ambos Marcam (BTTS) no Tempo Regulamentar
                data.get_btts_full_time(id_jogo=id_jogo , jogo=jogo)               
                    
                                    
                colecao_partidas.insert(jogo.copy())
                    
            except:
                print(f'Erro ao coletar dados do jogo {id_jogo}')
                sleep(0.5) 

driver.quit()
​
A raspagem dos próximos jogos fica no arquivo run_pj.py
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from tqdm.auto import tqdm
import pandas as pd
import os
import warnings
from modules.Ligas import ligas
from modules.get_odds import GetOdds

warnings.filterwarnings("ignore")

# Configurações do Firefox
firefox_options = Options()
#firefox_options.add_argument("--headless")  # Executa em modo headless

# Inicia o serviço do GeckoDriver
service = Service('geckodriver.exe')  

# Cria uma instância do Firefox
driver = webdriver.Firefox(service=service, options=firefox_options)

data = GetOdds(driver)
driver.maximize_window()


df = pd.DataFrame()
for liga in tqdm(ligas):
    url = f'https://www.flashscore.com.br/futebol/{liga}/calendario/'
    driver.get(url)

    try:
        WebDriverWait(driver, 8).until(EC.visibility_of_element_located((By.CSS_SELECTOR,'button#onetrust-accept-btn-handler')))
        button_cookies = driver.find_element(By.CSS_SELECTOR,'button#onetrust-accept-btn-handler')
        button_cookies.click()
    except:
        print("cookies already closed")
        
    sleep(3)    
        
    jogos = driver.find_elements(By.CSS_SELECTOR,'div.event__match')

    sleep(3)
    jogos_data = []
    id_jogos =[]

    for i in jogos:
        id_jogos.append(i.get_attribute("id")[4:])  
        id_jogos = id_jogos[:10] 
        
    season = driver.find_element(By.CSS_SELECTOR,'div.heading__info').text 
    print(driver.title)

    for id_jogo in tqdm(id_jogos):

        try:
            jogo = {}

            # Obter detalhes gerais do jogo
            data.get_match_details(id_jogo=id_jogo , jogo=jogo, season=season)

            # Obter odds de 1x2 do jogo no Tempo Regulamentar
            data.get_odds_1x2(id_jogo=id_jogo , jogo=jogo)
                        
            # Obter odds de Acima/Abaixo do 1º Tempo
            data.get_ou_first_half(id_jogo=id_jogo , jogo=jogo)

            # Obter odds de Acima/Abaixo do Tempo Regulamentar
            data.get_ou_full_time(id_jogo=id_jogo , jogo=jogo)

            # Obter odds de Ambos Marcam (BTTS) no Tempo Regulamentar
            data.get_btts_full_time(id_jogo=id_jogo , jogo=jogo)
           
            jogos_data.append(jogo)               
            df_liga = pd.DataFrame(jogos_data)
            df = pd.concat([df, df_liga], ignore_index=True)
            df.sort_values(['Date','Time'], inplace=True)
            df.reset_index(drop=True, inplace=True)
            df.index = df.index + 1
            df.index.name = 'Nº'
            #print(jogo)                
                                
                
        except:
            print(f'Erro ao coletar dados do jogo {id_jogo}')
            sleep(0.5) 
            
 
driver.quit()             
df = df[
    [
        "Id",
        "Date",
        "Time",
        "League",
        "Season",
        "Round_number",
        "Home",
        "Away",
        "FT_Odd_ML_H",
        "FT_Odd_ML_D",
        "FT_Odd_ML_A",
        "HT_Odd_Over05",
        "HT_Odd_Under05",
        "FT_Odd_Over05",
        "FT_Odd_Under05",
        "FT_Odd_Over15",
        "FT_Odd_Under15",
        "FT_Odd_Over25",
        "FT_Odd_Under25",
        "FT_Odd_Over35",
        "FT_Odd_Under35",
        "FT_Odd_Over45",
        "FT_Odd_Under45",
        "FT_Odd_BTTS_Yes",
        "FT_Odd_BTTS_No",
    ]
]

df.columns = [
    "Id",
    "Date",
    "Time",
    "League",
    "Season",
    "Round",
    "Home",
    "Away",
    "FT_Odd_H",
    "FT_Odd_D",
    "FT_Odd_A",
    "HT_Odd_Over05",
    "HT_Odd_Under05",
    "FT_Odd_Over05",
    "FT_Odd_Under05",
    "FT_Odd_Over15",
    "FT_Odd_Under15",
    "FT_Odd_Over25",
    "FT_Odd_Under25",
    "FT_Odd_Over35",
    "FT_Odd_Under35",
    "FT_Odd_Over45",
    "FT_Odd_Under45",
    "Odd_BTTS_Yes",
    "Odd_BTTS_No",
]
  
df.drop_duplicates(subset=['Id'], inplace=True)



diretorio ="base_excel"
if not os.path.exists(diretorio):
    os.makedirs(diretorio)
    
df.to_excel(os.path.join(diretorio, 'jogos_do_dia.xlsx'), index=False)       
                 
​
No arquivo "clear_data.py", salvamos em csv  os dados do nosso banco de dados. 
import pandas as pd
from tinydb import TinyDB


colecao_partidas1 = TinyDB("db/base_flashscore_temp_atual.json")
df = pd.DataFrame(colecao_partidas1.all())


df = df.sort_values(["Date", "Time"])

df = df.dropna()
df = df.reset_index(drop=True)
df.index += 1


df.to_csv('base_excel/base_flashscore.csv',index=False)